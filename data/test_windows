from scipy.signal import hilbert, cheby1, filtfilt
import numpy as np
from bokeh.plotting import figure, output_file, show
import wfdb
import matplotlib.pyplot as plt
import h5py
import os
import re
import random
import pandas as pd
from wfdb import processing
from functools import partial
import torch
from torch.utils.data import DataLoader, TensorDataset
def extract_test_windows(signal, win_size, stride):
    normalize = partial(processing.normalize_bound, lb=-1, ub=1)

    signal = np.squeeze(signal)

    pad_sig = np.pad(signal,
                     (win_size - stride, win_size),
                     mode='edge')

    # Lists of data windows and corresponding indices
    data_windows = []
    win_idx = []
    # Indices for padded signal
    pad_id = np.arange(pad_sig.shape[0])

    # Split into windows and save corresponding padded indices
    for win_id in range(0, len(pad_sig), stride):
        if win_id + win_size < len(pad_sig):

            window = pad_sig[win_id:win_id + win_size]
            if window.any():
                window = np.squeeze(np.apply_along_axis(normalize, 0, window))

            data_windows.append(window)
            win_idx.append(pad_id[win_id:win_id + win_size])

    data_windows = np.asarray(data_windows)
    data_windows = data_windows.reshape(data_windows.shape[0],
                                        data_windows.shape[1], 1)
    win_idx = np.asarray(win_idx)
    win_idx = win_idx.reshape(win_idx.shape[0] * win_idx.shape[1])

    return win_idx, data_windows

data_path = '/Users/24IshaK/Desktop/UCSC Internship/records'
folder = os.listdir(data_path)
N = 10
print(f'The {N}-th record is records/A{N:05d}.h5')
data_path = '/Users/24IshaK/Desktop/UCSC Internship/records'
folder = os.listdir(data_path)

with h5py.File(f'records/A{N:05d}.h5', 'r') as f:
    ecg_signal_test = f['ecg'][()]
    print('The size of record: {}'.format(ecg_signal_test.shape))
sampling_frequency2 = 500

record_list = []
Ecg_signal_random = []
padded_indices_random = []
data_windows_random = []
for i_n in folder:
    res = re.compile("([a-zA-Z]+)([0-9]+)").match(i_n.split('.h5')[0])
    if res:
        record_list.append(res.group(2))
        record_list.sort()
        random_record = random.choices(record_list, k=10000)
    else:
        print("No matches!!!")
        continue
for N in range(len(random_record)):
    with h5py.File(f'records/A{random_record[N]}.h5','r') as f:
        ecg_signal = f['ecg'][()]
        # print('The size of record: {}'.format(ecg_signal.shape))
        # plot the signal
        s = ecg_signal[2]
        "Lead II"
        "The sampling frequency is 500 Hz. L is the number of samples and 12 is the number of leads. The order of leads is I, II, III, aVR,aVL, aVF, V1, V2, V3, V4, V5, V6. There are 25770 ECG data files in total."
        plt.plot(s[0:1500])
        plt.show()
        win_size = 8000
        padded_indices, data_windows = extract_test_windows(s,win_size=8000, stride=6000)
        data_windows = torch.tensor(data_windows.reshape(-1, 1, win_size)).float()
        test_ds = TensorDataset(data_windows, data_windows)
        test_dl = DataLoader(test_ds, batch_size=8, shuffle=False)
        padded_indices_random.append(padded_indices)
        data_windows_random.append(data_windows)
    Ecg_signal_random.append(s)
